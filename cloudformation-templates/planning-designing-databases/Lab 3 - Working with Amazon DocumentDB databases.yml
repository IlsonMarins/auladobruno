AWSTemplateFormatVersion: 2010-09-09
Description: Planning and Designing Databases on AWS - Lab 3 - Working with Amazon DocumentDB databases

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

  LinuxAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  DBClusterName:
    Type: String
    Description: The name of the DocumentDB cluster.
    Default: MyDocDB

  DBUsername:
    Type: String
    Description: The username for the DocumentDB cluster.
    Default: docdbadmin

  DBPassword:
    Type: String
    Description: The password for the DocumentDB cluster.
    Default: Pa33w0rd!

  FunctionName:
    Type: String
    Description: The name of the Lambda function.
    Default: DocumentDBLambdaExample

  StageName:
    Type: String
    Description: The name of the API Gateway stage.
    Default: docdbdemo

  S3PathPrefix:
    Type: String
    Description: The path prefix where the lab resources are stored.
    Default: courses/ILT-TF-200-DBDBAW/v1.2.4/lab3-documentdb

  S3ResourceBucket:
    Type: String
    Description: The S3 Bucket of where to pull lab resources from.
    Default: -tcprod

Resources:
  # Create the VPC for DocumentDB and the Command Host

  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: LabVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: Public Subnet

  PrivateSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.101.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: Private Subnet (AZ1)

  PrivateSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.102.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
      Tags:
        - Key: Name
          Value: Private Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: PublicSubnet
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Lab Data Copy Logic
  #
  # 1) The 'LabDataCopyFunction' function requests Capstone to copy the data to the 'LabDataBucket'.
  # 2) Files are being copied from the 'LabDataBucket' to the '/tmp/' directory on the 'CommandHostInstance'.

  LabDataBucket:
    Type: AWS::S3::Bucket

  LabDataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LabDataBucket
      PolicyDocument:
        Statement:
          - Sid: Capstone
            Action:
              - s3:PutObject
            Effect: Allow
            Resource: !Sub ${LabDataBucket.Arn}/*
            Principal:
              AWS: arn:aws:sts::507824744738:assumed-role/capstone-dev-us-east-1-lambdaRole/capstone-dev-dataCopy

  LabDataExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LabDataCopyFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import json
          import urllib3

          http = urllib3.PoolManager()

          def request_data_via_capstone(properties):
            response = http.request(
              "PUT",
              "https://81pywpf962.execute-api.us-east-1.amazonaws.com/dev/capstone",
              body=json.dumps({
                "sku": properties["SKU"],
                "account": properties["Account"],
                "bucket": properties["Bucket"]
              }),
              headers={
                "Content-Type": "application/json",
                "x-api-key": "eDOQbpbHh48P71is2MRULaYEcTpOlWzX5F7tpAoy"
              }
            )

            return json.loads(response.data.decode("UTF-8"))

          def handler(event, context):
            status = cfnresponse.SUCCESS
            data = {}

            try:
              type = event.get("RequestType")
              properties = event.get("ResourceProperties")

              if type == "Create":
                data["Capstone"] = request_data_via_capstone(properties)
            except Exception as exception:
              status = cfnresponse.FAILED
              data["Exception"] = str(exception)
            finally:
              cfnresponse.send(event, context, status, data)
      Handler: index.handler
      Role: !GetAtt LabDataExecutionRole.Arn
      Runtime: python3.7
      Timeout: 60

  LabData:
    Type: Custom::LabData
    Properties:
      ServiceToken: !GetAtt LabDataCopyFunction.Arn
      Account: !Ref AWS::AccountId
      Bucket: !Ref LabDataBucket
      SKU: ILT-TF-200-DBDBAW-1/lab3-documentdb

  # Create the DocumentDB Cluster

  DBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for the DocumentDB Cluster
      SubnetIds:
        - !Ref PrivateSubnetAZ1
        - !Ref PrivateSubnetAZ2

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the DocumentDB Cluster
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref CommandHostSecurityGroup
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref DBQuerySecurityGroup
      VpcId: !Ref LabVPC

  DBCluster:
    Type: AWS::DocDB::DBCluster
    DeletionPolicy: Delete
    Properties:
      DBClusterIdentifier: !Sub ${DBClusterName}
      DBSubnetGroupName: !Ref DBSubnetGroup
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup

  DBInstanceA:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: db.r5.large

  DBInstanceB:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: db.r5.large

  # Create the DocumentDB Query API

  DBQuerySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Lambda Function
      VpcId: !Ref LabVPC

  DBQueryEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the VPC Endpoint
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref CommandHostSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref DBQuerySecurityGroup
      VpcId: !Ref LabVPC

  DBQueryEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref LabVPC
      SubnetIds:
        - !Ref PrivateSubnetAZ1
        - !Ref PrivateSubnetAZ2
      SecurityGroupIds:
        - !Ref DBQueryEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager

  DBQueryExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: Other
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:ListSecrets
                Resource: "*"

  DBQuery:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Code:
        S3Bucket: !Sub ${AWS::Region}${S3ResourceBucket}
        S3Key: !Sub ${S3PathPrefix}/scripts/app-lambda.zip
      Environment:
        Variables:
          secret_name: dbApp
          region: !Ref AWS::Region
          db_port: 27017
          pem_locator: rds-combined-ca-bundle.pem
      Handler: app.lambda_handler
      MemorySize: 1024
      Role: !GetAtt DBQueryExecutionRole.Arn
      Runtime: python3.7
      VpcConfig:
        SecurityGroupIds:
          - !Ref DBQuerySecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetAZ1
          - !Ref PrivateSubnetAZ2
      Timeout: 120

  DBQueryPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DBQuery.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DBApi}/*

  DBApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DocDbAPIGW
      Description: Api Gateway

  DBApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DBQuery.Arn}/invocations
      ResourceId: !GetAtt DBApi.RootResourceId
      RestApiId: !Ref DBApi

  DBApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - DBApiRootMethod
    Properties:
      RestApiId: !Ref DBApi
      StageName: !Ref StageName

  # Create the Command Host with the adminMongo Application

  CommandHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Command Host Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref LabVPC

  CommandHostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  CommandHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref CommandHostRole

  CommandHostInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    DependsOn:
      - LabData
      - PublicSubnetRouteTableAssociation
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - Dependencies
            - AWS
            - AdminMongo
            - Data
            - Workspace
            - SSM
        Dependencies:
          files:
            /etc/yum.repos.d/mongo.repo:
              content: |
                [mongodb-org-4.2]
                name=MongoDB Repository
                baseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/4.2/x86_64/
                gpgcheck=0
                enabled=1
                gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc
          commands:
            1-Add-NodeJS:
              command: curl --silent --location https://rpm.nodesource.com/setup_10.x | bash -
            2-Install-Yum-Packages:
              command: yum install -y git mongodb-org-shell mongodb-org-tools nodejs python-pip python-tools
            3-Update-Yum-Packages:
              command: yum update -y
            4-Install-Pip-Packages:
              command: python -m pip install boto3 pymongo
            5-Install-adminMongo:
              command: git clone https://github.com/mrvautin/adminMongo.git
        AWS:
          commands:
            0-update-awscli:
              command: pip install --upgrade awscli
            1-AWS-Default-Region:
              command: !Sub sudo -u ec2-user aws configure set default.region ${AWS::Region}
        AdminMongo:
          files:
            /adminMongo/config/app.json:
              content: !Sub |
                {
                  "app": {
                    "host": "0.0.0.0",
                    "port": 80,
                    "password": "${DBPassword}",
                    "locale": "en",
                    "context": "dbApp",
                    "monitoring": false
                  }
                }
              mode: "000777"
            /adminMongo/rds-combined-ca-bundle.pem:
              source: https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem
            /etc/systemd/system/adminMongo.service:
              content: |
                [Unit]
                Description=adminMongo

                [Service]
                ExecStart=/usr/bin/npm start
                Restart=always
                User=root
                Group=root
                Environment=PATH=/usr/bin:/usr/local/bin
                WorkingDirectory=/adminMongo

                [Install]
                WantedBy=multi-user.target
          commands:
            1-Install-NPM-Packages:
              command: npm install
              cwd: /adminMongo
          services:
            sysvinit:
              adminMongo:
                enabled: true
                ensureRunning: true
        Data:
          commands:
            1-Copy-Data:
              command: !Sub aws s3 sync s3://${LabDataBucket}/ /tmp/
        Workspace:
          files:
            /home/ec2-user/docdbpush.py:
              source: !Sub https://${AWS::Region}${S3ResourceBucket}.s3.${AWS::Region}.amazonaws.com/${S3PathPrefix}/scripts/docdbpush.py
              mode: "000777"
            /home/ec2-user/rds-combined-ca-bundle.pem:
              source: https://s3.amazonaws.com/rds-downloads/rds-ca-2019-root.pem
          commands:
            1-Update-Ownership:
              command: chown -R ec2-user:ec2-user /home/ec2-user
            2-Replace-Username:
              command: !Sub sed -i 's/MasterUser/${DBUsername}/g' /home/ec2-user/docdbpush.py
            3-Replace-Password:
              command: !Sub sed -i 's/MasterPassword/${DBPassword}/g' /home/ec2-user/docdbpush.py
            4-Replace-Endpoint:
              command: !Sub sed -i 's/DBCluster/${DBCluster.Endpoint}/g' /home/ec2-user/docdbpush.py
        SSM:
          users:
            ssm-user:
              uid: 1001
              homeDir: /home/ssm-user
          files:
            /etc/sudoers.d/ssm-agent-users:
              content: |
                # User rules for ssm-user
                ssm-user ALL=(ALL) NOPASSWD:ALL
              mode: "000440"
          commands:
            1-Copy-Home-Directory:
              command: cp -a /home/ec2-user /home/ssm-user
            2-Change-Ownership:
              command: chown -R ssm-user:ssm-user /home/ssm-user
    Properties:
      IamInstanceProfile: !Ref CommandHostInstanceProfile
      ImageId: !Ref LinuxAmiId
      InstanceType: t3.small
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref CommandHostSecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: CommandHost
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --region ${AWS::Region} --resource CommandHostInstance
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --region ${AWS::Region} --resource CommandHostInstance --exit-code $?

  ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  GroupAssignment:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref ReadOnlyGroup
      Users:
        - awsstudent

Outputs:
  adminMongoUrl:
    Description: The URL for the adminMongo application.
    Value: !Sub http://${CommandHostInstance.PublicDnsName}/dbApp

  CommandHost:
    Description: The IP address of the command host.
    Value: !GetAtt CommandHostInstance.PublicIp

  CommandHostSessionUrl:
    Description: The URL to the Session Management Console for the command host.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${CommandHostInstance}?region=${AWS::Region}

  ClusterEndpoint:
    Description: The endpoint for the DocumentDB cluster.
    Value: !GetAtt DBCluster.Endpoint

  DocDbUsername:
    Description: The username for the DocumentDB cluster.
    Value: !Ref DBUsername

  DocDbPassword:
    Description: The password for the DocumentDB cluster.
    Value: !Ref DBPassword

  Region:
    Description: The lab's region.
    Value: !Ref AWS::Region