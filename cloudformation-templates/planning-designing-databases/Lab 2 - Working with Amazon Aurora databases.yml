AWSTemplateFormatVersion: 2010-09-09
Description: Planning and Designing Databases on AWS - Lab 2 - Working with Amazon Aurora databases

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

  LinuxAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  DBName:
    Type: String
    Description: The name of the database in the RDS cluster.
    Default: ontimeflights

  DBUsername:
    Type: String
    Description: The username for the RDS cluster.
    Default: dbadmin

  DBPassword:
    Type: String
    Description: The password for the RDS cluster.
    Default: Pa33w0rd!

  S3PathPrefix:
    Type: String
    Description: The path prefix where the lab resources are stored.
    Default: courses/ILT-TF-200-DBDBAW/v1.2.4/lab2-aurora

  S3ResourceBucket:
    Type: String
    Description: The S3 Bucket of where to pull lab resources from.
    Default: -tcprod

Resources:
  # Create the VPC for the RDS Cluster and the Command Host

  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: LabVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: Public Subnet

  PrivateSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.101.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: Private Subnet (AZ1)

  PrivateSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.102.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
      Tags:
        - Key: Name
          Value: Private Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: PublicSubnet
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PrivateRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    DependsOn: PublicSubnet
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Private Route Table (AZ1)

  PrivateRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    DependsOn: PublicSubnet
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Public Route Table (AZ2)

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAZ1
      RouteTableId: !Ref PrivateRouteTableAZ1

  PrivateSubnetRouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAZ2
      RouteTableId: !Ref PrivateRouteTableAZ2

  # Create the RDS Cluster (Aurora)

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for the RDS Cluster
      SubnetIds:
        - !Ref PrivateSubnetAZ1
        - !Ref PrivateSubnetAZ2

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the RDS Cluster
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref CommandHostSecurityGroup
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LabDataSecurityGroup
      VpcId: !Ref LabVPC

  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora
      EngineMode: parallelquery
      EngineVersion: 5.6.mysql_aurora.1.19.5
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DatabaseName: !Ref DBName
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup

  DBInstanceWriter:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: db.r5.4xlarge
      PromotionTier: 1
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora
      PubliclyAccessible: false

  DBInstanceReader:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - DBInstanceWriter
    DeletionPolicy: Delete
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: db.r5.large
      PromotionTier: 2
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora
      PubliclyAccessible: false

  # Lab Data Import Logic
  #
  # 1) Schema is being created via the 'CommandHostInstance'.
  # 2) Files are being copied from the source S3 bucket to the 'LabDataBucket' via the 'CommandHostInstance'.
  # 3) S3 events trigger 'LabDataImportFunction' which inserts the data into 'DBInstanceWriter' when the data arrives in the 'LabDataBucket'.
  # 4) The 'LabDataWaitCondition' is used to wait for 503 successful runs of 'LabDataImportFunction'.

  LabDataWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  LabDataWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref LabDataWaitHandle
      Timeout: "3600"
      Count: 503

  LabDataBucket:
    Type: AWS::S3::Bucket

  LabDataEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - PrivateSubnetRouteTableAssociationAZ1
      - PrivateSubnetRouteTableAssociationAZ2
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTableAZ1
        - !Ref PrivateRouteTableAZ2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref LabVPC

  LabDataSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Lambda Function
      VpcId: !Ref LabVPC

  LabDataExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  LabDataImportFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${AWS::Region}${S3ResourceBucket}
        S3Key: !Sub ${S3PathPrefix}/scripts/dataimport.zip
      Environment:
        Variables:
          rdsEndpoint: !GetAtt DBInstanceWriter.Endpoint.Address
          rdsPassword: !Ref DBPassword
          rdsUsername: !Ref DBUsername
          rdsDbName: !Ref DBName
          cfnSignedURL: !Ref LabDataWaitHandle
      Handler: datacopy.lambda_handler
      MemorySize: 512
      ReservedConcurrentExecutions: 16
      Role: !GetAtt LabDataExecutionRole.Arn
      Runtime: python3.7
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          - !Ref LabDataSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetAZ1
          - !Ref PrivateSubnetAZ2

  LabDataImportPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LabDataImportFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt LabDataBucket.Arn

  # Create the Command Host

  CommandHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Command Host Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref LabVPC

  CommandHostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: LabDataBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:PutBucketNotification
                Effect: Allow
                Resource: !GetAtt LabDataBucket.Arn
              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource: !Sub ${LabDataBucket.Arn}/*

  CommandHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref CommandHostRole

  CommandHostInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    DependsOn:
      - LabDataImportPermission
      - PublicSubnetRouteTableAssociation
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - Dependencies
            - AWS
            - Data
            - Workspace
            - SSM
        Dependencies:
          commands:
            1-Install-Yum-Packages:
              command: yum install -y mysql
            2-Update-Yum-Packages:
              command: yum update -y
        AWS:
          commands:
            1-AWS-Default-Region:
              command: !Sub sudo -u ec2-user aws configure set default.region ${AWS::Region}
        Data:
          files:
            /home/ec2-user/createTable.sql:
              source: !Sub https://${AWS::Region}${S3ResourceBucket}.s3.${AWS::Region}.amazonaws.com/${S3PathPrefix}/scripts/createTable.sql
            /home/ec2-user/FlightData_CarrierTable.sql:
              source: https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-200-DBDBAW-1/lab2-aurora/FlightData_CarrierTable.sql
          commands:
            1-Create-FlightData-Table:
              command: !Sub mysql -u ${DBUsername} -p${DBPassword} -h ${DBInstanceWriter.Endpoint.Address} ${DBName} < /home/ec2-user/createTable.sql
            2-Create-Carriers-Table:
              command: !Sub mysql -u ${DBUsername} -p${DBPassword} -h ${DBInstanceWriter.Endpoint.Address} ${DBName} < /home/ec2-user/FlightData_CarrierTable.sql
            3-Enable-Notifications:
              command: !Sub |
                aws s3api put-bucket-notification-configuration --bucket ${LabDataBucket} --notification-configuration '{"LambdaFunctionConfigurations": [{"LambdaFunctionArn": "${LabDataImportFunction.Arn}", "Events": ["s3:ObjectCreated:*"], "Filter": {"Key": {"FilterRules": [{"Name": "suffix", "Value": ".txt"}]}}}]}'
            4-Sync-Data:
              command: !Sub aws s3 sync s3://aws-tc-largeobjects/ILT-TF-200-DBDBAW-1/lab2-aurora/RawFlightData-5/ s3://${LabDataBucket}/
        Workspace:
          commands:
            1-Update-Ownership:
              command: chown -R ec2-user:ec2-user /home/ec2-user
        SSM:
          users:
            ssm-user:
              uid: 1001
              homeDir: /home/ssm-user
          files:
            /etc/sudoers.d/ssm-agent-users:
              content: |
                # User rules for ssm-user
                ssm-user ALL=(ALL) NOPASSWD:ALL
              mode: "000440"
          commands:
            1-Copy-Home-Directory:
              command: cp -a /home/ec2-user /home/ssm-user
            2-Change-Ownership:
              command: chown -R ssm-user:ssm-user /home/ssm-user
    Properties:
      IamInstanceProfile: !Ref CommandHostInstanceProfile
      ImageId: !Ref LinuxAmiId
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref CommandHostSecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: CommandHost
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --region ${AWS::Region} --resource CommandHostInstance
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --region ${AWS::Region} --resource CommandHostInstance --exit-code $?

  # Create the CloudWatch Dashboard

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${DBName}-Dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [
                    "AWS/RDS",
                    "CPUUtilization",
                    "DBInstanceIdentifier",
                    "${DBInstanceReader}"
                  ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "RDS: Instance CPU usage"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [
                    "AWS/RDS",
                    "Aurora_pq_request_attempted",
                    "DBInstanceIdentifier",
                    "${DBInstanceReader}"
                  ],
                  [
                    "AWS/RDS",
                    "Aurora_pq_request_executed",
                    "DBInstanceIdentifier",
                    "${DBInstanceReader}"
                  ],
                  [
                    "AWS/RDS",
                    "Aurora_pq_request_failed",
                    "DBInstanceIdentifier",
                    "${DBInstanceReader}"
                  ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "RDS: Instance PQ Stats"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [
                    "AWS/RDS",
                    "BufferCacheHitRatio",
                    "DBInstanceIdentifier",
                    "${DBInstanceReader}"
                  ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "RDS: Buffer cache hit ratio"
              }
            }
          ]
        }

  ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  GroupAssignment:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref ReadOnlyGroup
      Users:
        - awsstudent

Outputs:
  CommandHost:
    Description: The IP address of the command host.
    Value: !GetAtt CommandHostInstance.PublicIp

  CommandHostSessionUrl:
    Description: The URL to the Session Management Console for the command host.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${CommandHostInstance}?region=${AWS::Region}

  LargeDBEndpoint:
    Description: The IP addres of the large RDS instance used for writing.
    Value: !GetAtt DBInstanceWriter.Endpoint.Address

  SmallDBEndpoint:
    Description: The IP addres of the small RDS instance used for reading.
    Value: !GetAtt DBInstanceReader.Endpoint.Address

  Port:
    Description: The Port used by the RDS cluster.
    Value: !GetAtt DBCluster.Endpoint.Port

  DBUserName:
    Description: The username for the RDS cluster.
    Value: !Ref DBUsername

  DBUserPasswd:
    Description: The password for the RDS cluster.
    Value: !Ref DBPassword

  Region:
    Description: The lab's region.
    Value: !Ref AWS::Region