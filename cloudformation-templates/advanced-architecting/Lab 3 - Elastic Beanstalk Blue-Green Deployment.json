{
    "Description": "Lab 3: Elastic Beanstalk Blue-Green Deployment",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair",
            "Type": "String"
        },
        "AWSAmiId": {
            "Type": "String",
            "Default": "x86_64,amzn-ami-hvm-2017.09.0,amazon,ebs,hvm"
        },
        "UserId": {
            "Default": "awsstudent",
            "Type": "String"
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.1.0.0/16",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "lab-vpc"
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "lab-igw"
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.1.1.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "lab-subnet-public1"
                    }
                ]
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.1.2.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "lab-subnet-public2"
                    }
                ]
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public Route Table"
                    }
                ]
            }
        },
        "PublicDefaultRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicRouteAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "PublicRouteAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                }
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.1.3.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "lab-subnet-private1"
                    }
                ]
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.1.4.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "lab-subnet-private2"
                    }
                ]
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private Route Table"
                    }
                ]
            }
        },
        "PrivateRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATInstance"
                }
            }
        },
        "PrivateRouteAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                }
            }
        },
        "PrivateRouteAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                }
            }
        },
        "NATInstance": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "AttachGateway",
            "Properties": {
                "ImageId": {
                    "Ref": "AWSAmiId"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "InstanceType": "t2.micro",
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0",
                        "AssociatePublicIpAddress": "true",
                        "SubnetId": {
                            "Ref": "PublicSubnet2"
                        },
                        "GroupSet": [
                            {
                                "Ref": "NATSecurityGroup"
                            }
                        ]
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NAT Server"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash \n",
                                "yum -y update \n",
                                "echo 1 > /proc/sys/net/ipv4/ip_forward \n",
                                "echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects \n",
                                "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE \n",
                                "/sbin/iptables-save > /etc/sysconfig/iptables \n",
                                "mkdir -p /etc/sysctl.d/ \n",
                                "cat <<EOF > /etc/sysctl.d/nat.conf \n",
                                "net.ipv4.ip_forward = 1 \n",
                                "net.ipv4.conf.eth0.send_redirects = 0 \n",
                                "EOF \n"
                            ]
                        ]
                    }
                }
            }
        },
        "NATSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable internal access to the NAT device",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NATSecurityGroup"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "1024",
                        "CidrIp": "10.1.3.0/24"
                    },
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "1024",
                        "CidrIp": "10.1.4.0/24"
                    }
                ]
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "DB Instance Security Group",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DBSecurityGroup"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "SourceSecurityGroupId": {
                            "Fn::GetAtt": [
                                "EBSecurityGroup",
                                "GroupId"
                            ]
                        }
                    }
                ]
            }
        },
        "EBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Beanstalk Security Group",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "EBSecurityGroup"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Lab DB Subnet Group",
                "SubnetIds": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ]
            }
        },
        "Database": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName": "Airports",
                "AllocatedStorage": "5",
                "DBInstanceClass": "db.t2.micro",
                "Engine": "MySQL",
                "MasterUsername": "master",
                "MasterUserPassword": "ry245ur6123!",
                "MultiAZ": "false",
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "VPCSecurityGroups": [
                    {
                        "Ref": "DBSecurityGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Airports DB Instance"
                    }
                ]
            }
        },
        "EBStackInfo": {
            "Type": "Custom::EBStackInfo",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "EBStackInfoFunction",
                        "Arn"
                    ]
                },
                "Match": "64bit Amazon Linux (.*) Python 2.7"
            }
        },
        "EBStackInfoFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "from __future__ import print_function",
                                "import boto3",
                                "import re",
                                "import cfnresponse",
                                "def handler(event,context):",
                                "    result = {}",
                                "    try:",
                                "        print(event)",
                                "        if event and 'ResourceProperties' in event and 'Match' in event['ResourceProperties']:",
                                "            match = event['ResourceProperties']['Match']",
                                "            ebn = boto3.client('elasticbeanstalk')",
                                "            response = ebn.list_available_solution_stacks()",
                                "            stacks = [s for s in response['SolutionStacks'] if re.match(match, s)]",
                                "            print(match)",
                                "            print(response['SolutionStacks'])",
                                "            if stacks:",
                                "                result['SolutionStackName'] = stacks[0]",
                                "    except Exception as e:",
                                "        print(e)",
                                "    cfnresponse.send(event, context, cfnresponse.SUCCESS, result)"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": "90"
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "elasticbeanstalk:ListAvailableSolutionStacks"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "EBWebTierRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier"
                ]
            }
        },
        "EBWebTierInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "EBWebTierRole"
                    }
                ]
            }
        },
        "EBServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "elasticbeanstalk.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole",
                            "Condition": {
                                "StringEquals": {
                                    "sts:ExternalId": "elasticbeanstalk"
                                }
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService",
                    "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth"
                ]
            }
        },
        "AirportsApplication": {
            "Type": "AWS::ElasticBeanstalk::Application",
            "Properties": {
                "Description": "Airports Application"
            }
        },
        "AirportsApplicationVersion": {
            "Type": "AWS::ElasticBeanstalk::ApplicationVersion",
            "Properties": {
                "ApplicationName": {
                    "Ref": "AirportsApplication"
                },
                "Description": "AWS ElasticBeanstalk Sample Application Version",
                "SourceBundle": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "-tcprod"
                            ]
                        ]
                    },
                    "S3Key": "courses/ILT-TF-200-ADVARC/v2.7.7/lab-3-eb/scripts/app.zip"
                }
            }
        },
        "AirportsConfigurationTemplate": {
            "Type": "AWS::ElasticBeanstalk::ConfigurationTemplate",
            "Properties": {
                "ApplicationName": {
                    "Ref": "AirportsApplication"
                },
                "Description": "Airports configuration",
                "OptionSettings": [
                    {
                        "Namespace": "aws:elasticbeanstalk:environment",
                        "OptionName": "EnvironmentType",
                        "Value": "SingleInstance"
                    },
                    {
                        "Namespace": "aws:elasticbeanstalk:environment",
                        "OptionName": "ServiceRole",
                        "Value": {
                            "Ref": "EBServiceRole"
                        }
                    },
                    {
                        "Namespace": "aws:ec2:vpc",
                        "OptionName": "VPCId",
                        "Value": {
                            "Ref": "VPC"
                        }
                    },
                    {
                        "Namespace": "aws:ec2:vpc",
                        "OptionName": "Subnets",
                        "Value": {
                            "Ref": "PublicSubnet1"
                        }
                    },
                    {
                        "Namespace": "aws:ec2:vpc",
                        "OptionName": "AssociatePublicIpAddress",
                        "Value": "true"
                    },
                    {
                        "Namespace": "aws:autoscaling:launchconfiguration",
                        "OptionName": "EC2KeyName",
                        "Value": {
                            "Ref": "KeyName"
                        }
                    },
                    {
                        "Namespace": "aws:autoscaling:launchconfiguration",
                        "OptionName": "InstanceType",
                        "Value": "t2.medium"
                    },
                    {
                        "Namespace": "aws:autoscaling:launchconfiguration",
                        "OptionName": "SecurityGroups",
                        "Value": {
                            "Ref": "EBSecurityGroup"
                        }
                    },
                    {
                        "Namespace": "aws:autoscaling:launchconfiguration",
                        "OptionName": "IamInstanceProfile",
                        "Value": {
                            "Ref": "EBWebTierInstanceProfile"
                        }
                    },
                    {
                        "Namespace": "aws:elasticbeanstalk:application:environment",
                        "OptionName": "DATABASE_HOST",
                        "Value": {
                            "Fn::GetAtt": [
                                "Database",
                                "Endpoint.Address"
                            ]
                        }
                    },
                    {
                        "Namespace": "aws:elasticbeanstalk:application:environment",
                        "OptionName": "DATABASE_USER",
                        "Value": "master"
                    },
                    {
                        "Namespace": "aws:elasticbeanstalk:application:environment",
                        "OptionName": "DATABASE_PASSWORD",
                        "Value": "ry245ur6123!"
                    },
                    {
                        "Namespace": "aws:elasticbeanstalk:application:environment",
                        "OptionName": "DATABASE_DB_NAME",
                        "Value": "Airports"
                    }
                ],
                "SolutionStackName": {
                    "Fn::GetAtt": [
                        "EBStackInfo",
                        "SolutionStackName"
                    ]
                }
            }
        },
        "AirportsEnvironment": {
            "Type": "AWS::ElasticBeanstalk::Environment",
            "Properties": {
                "ApplicationName": {
                    "Ref": "AirportsApplication"
                },
                "EnvironmentName": "blue",
                "Description": "Production Environment",
                "TemplateName": {
                    "Ref": "AirportsConfigurationTemplate"
                },
                "VersionLabel": {
                    "Ref": "AirportsApplicationVersion"
                }
            }
        },
        "ReadOnlyGroup": {
            "Type": "AWS::IAM::Group",
            "Properties": {
                "GroupName": "QLReadOnly",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/ReadOnlyAccess"
                ]
            }
        },
        "GroupAssignment": {
            "Type": "AWS::IAM::UserToGroupAddition",
            "DependsOn": "ReadOnlyGroup",
            "Properties": {
                "GroupName": "QLReadOnly",
                "Users": [
                    {
                        "Ref": "UserId"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "PrivateSubnet1": {
            "Value": {
                "Ref": "PrivateSubnet1"
            }
        },
        "PrivateSubnet2": {
            "Value": {
                "Ref": "PrivateSubnet2"
            }
        },
        "URL": {
            "Description": "Beanstalk URL",
            "Value": {
                "Fn::GetAtt": [
                    "AirportsEnvironment",
                    "EndpointURL"
                ]
            }
        }
    }
}